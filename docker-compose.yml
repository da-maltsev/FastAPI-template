version: '3.5'

networks:
  project:
    driver: overlay
    external: true

services:

  app:
    networks:
      - ${COMPOSE_PROJECT_NAME}
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}_app_${APP_IMAGE_TAG:-local}
    environment:
      - START_LOCAL=${IS_LOCAL}
      - HOST=${HOST}
      - PORT=${PORT}
    volumes:
      - .:/app
    labels:
      - traefik.enable=true
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}

      - traefik.http.services.${COMPOSE_PROJECT_NAME}-app-service.loadbalancer.server.port=${PORT}
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.rule=Host(`${APP_URI}`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.entrypoints=http
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.service=${COMPOSE_PROJECT_NAME}-app-service
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.middlewares=https-redirect

      - traefik.http.services.secure-${COMPOSE_PROJECT_NAME}-app-service.loadbalancer.server.port=${PORT}
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.rule=Host(`${APP_URI}`)
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.entrypoints=https
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.service=${COMPOSE_PROJECT_NAME}-app-service

      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.tls=true
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.tls.certresolver=le
    depends_on:
      - traefik
      - db

  db:
    networks:
      - ${COMPOSE_PROJECT_NAME}
    container_name: ${COMPOSE_PROJECT_NAME}_postgres_${APP_IMAGE_TAG:-local}
    image: postgres:13.2-alpine
    command: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - ${DB_EXTERNAL_PORT:-5433}:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: unless-stopped

  traefik:
    image: traefik:v2.5.6
    container_name: ${COMPOSE_PROJECT_NAME}_traefik_${APP_IMAGE_TAG:-local}
    security_opt:
      - no-new-privileges:true
    ports:
      - ${TRAEFIK_WEB_PORT}:80
      - ${TRAEFIK_SECURE_WEB_PORT}:443
      - ${TRAEFIK_PORT}:8080
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:${TRAEFIK_WEB_PORT}
      - --entrypoints.https.address=:${TRAEFIK_SECURE_WEB_PORT}
      - --entrypoints.dashboard.address=:${TRAEFIK_PORT}

      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.le.acme.email=info@${APP_URI}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=http
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - ./data/traefik/letsencrypt:/letsencrypt
    networks:
      - ${COMPOSE_PROJECT_NAME}
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}

      # https-redirect middleware to redirect HTTP to HTTPS
      # It can be re-used by other stacks in other Docker Compose files
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

      # traefik-http set up only to use the middleware to redirect to https
      # Uses the environment variable TRAEFIK_DOMAIN
      - traefik.http.routers.traefik-public-http.rule=Host(`${TRAEFIK_URI?Variable not set}`)
      - traefik.http.routers.traefik-public-http.entrypoints=http
      - traefik.http.routers.traefik-public-http.middlewares=https-redirect
      # traefik-https the actual router using HTTPS
      # Uses the environment variable TRAEFIK_DOMAIN
      - traefik.http.routers.traefik-public-https.rule=Host(`${TRAEFIK_URI?Variable not set}`)
      - traefik.http.routers.traefik-public-https.entrypoints=https
      - traefik.http.routers.traefik-public-https.tls=true
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.traefik-public-https.service=api@internal
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.traefik-public-https.tls.certresolver=le
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-public.loadbalancer.server.port=${TRAEFIK_PORT}
    restart: unless-stopped

  celery_beat:
    networks:
      - ${COMPOSE_PROJECT_NAME}
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}_celery_beat_${CELERY_BEAT_IMAGE_TAG:-local}
    environment:
      - START_LOCAL=${IS_LOCAL}
      - HOST=${HOST}
      - PORT=${PORT}
    volumes:
      - .:/app
    depends_on:
      - traefik
      - redis
      - db
    command: celery -A app.jobs.celery_app:celery beat --loglevel=INFO -f logs/celery_beat_log.log

  celery_worker:
    networks:
      - ${COMPOSE_PROJECT_NAME}
    build: .
    container_name: ${COMPOSE_PROJECT_NAME}_celery_worker_${CELERY_WORKER_IMAGE_TAG:-local}
    environment:
      - START_LOCAL=${IS_LOCAL}
      - HOST=${HOST}
      - PORT=${PORT}
    volumes:
      - .:/app
    depends_on:
      - traefik
      - redis
      - db
    command: celery -A app.jobs.celery_app:celery worker --loglevel=INFO -f logs/celery_worker_log.log

  redis:
    networks:
      - ${COMPOSE_PROJECT_NAME}
    container_name: ${COMPOSE_PROJECT_NAME}_redis_${CELERY_WORKER_IMAGE_TAG:-local}
    image: redis:7-alpine
    depends_on:
      - traefik


volumes:
  postgres_data:
